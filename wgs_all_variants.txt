# Define input and output files and directories
configfile: "wgs.config.yaml"
SAMPLES, = glob_wildcards("{sample}.fastq.gz")

rule all:
    input:
        expand("results/{sample}.vcf.gz", sample=SAMPLES)

rule trim_reads:
    input:
        fq1="raw_data/{sample}_R1.fastq.gz",
        fq2="raw_data/{sample}_R2.fastq.gz"
    output:
        trimmed_fq1="data/{sample}_R1_trimmed.fastq.gz",
        trimmed_fq2="data/{sample}_R2_trimmed.fastq.gz"
    conda:
        "envs/trim_reads.yaml"
    shell:
        "trimmomatic PE -threads {config[threads]} {input.fq1} {input.fq2} {output.trimmed_fq1} {output.trimmed_fq2} {config[trim_opts]}"

rule map_reads:
    input:
        fq1="data/{sample}_R1_trimmed.fastq.gz",
        fq2="data/{sample}_R2_trimmed.fastq.gz"
    output:
        bam="results/{sample}.bam",
        bai="results/{sample}.bam.bai"
    conda:
        "envs/map_reads.yaml"
    shell:
        "bwa mem -t {config[threads]} -R '@RG\\tID:{wildcards.sample}\\tPL:illumina\\tSM:{wildcards.sample}' {config[ref]} {input.fq1} {input.fq2} | samtools view -bS - | samtools sort -@ {config[threads]} - -o {output.bam}"
        "samtools index {output.bam}"

rule call_variants:
    input:
        bam="results/{sample}.bam"
    output:
        vcf="results/{sample}.vcf.gz"
    conda:
        "envs/call_variants.yaml"
    shell:
        "bcftools mpileup -Ou -f {config[ref]} {input.bam} | bcftools call -mv -Oz -o {output.vcf}"
